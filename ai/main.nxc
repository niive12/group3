//sort = 35-45
//hvid = 55-65
#include "competition_result.h"

#define THRESHOLD 50
#define THRESHOLD_CENTER 50
#define EXPECTED_SENSOR_ERROR 1 //mismatch i lys fra rummet.
#define THRESHOLD_DIFF_SENSOR_R 6	
#define THRESHOLD_DIFF_SENSOR_L 3	
#define speed 75         // 90 Optimal ATM
#define kP 1.5             //  1.7
#define kI 0
#define kD 0

#define forward_left 165
#define forward_right 173
#define turn_speed_left 80
#define turn_speed_right 80

#define can_speed 80

#define MOT_R       OUT_B  //wheel right of line
#define MOT_L       OUT_A  //wheel left of line
#define MOTOR       OUT_AB //both wheels
#define LEFT        IN_1   //sensor left of line
#define CENTER      IN_2   //sensor center of crossing line
#define RIGHT       IN_3   //sensor right of line

void follow_line_f(char basespeed=speed);
void turn_right(bool forward=true);
void turn_left(bool forward=true);
void back();
void execute();

char sensor_left   = THRESHOLD + 1;
char sensor_right  = THRESHOLD + 1;
char sensor_center = THRESHOLD + 1;

char diff_sensor_left   = 0;
char diff_sensor_right  = 0;
char diff_sensor_center = 0;

char last_left  ; //static failed
char last_right ;
char last_center;
void update_sensor_values(){
	last_left   = sensor_left  ;
	last_right  = sensor_right ;
	last_center = sensor_center;
	
	sensor_left   = Sensor(LEFT) - 3  ;
	sensor_right  = Sensor(RIGHT) ;
	sensor_center = Sensor(CENTER);

	diff_sensor_left   = sensor_left   - last_left   ;
	diff_sensor_right  = sensor_right  - last_right  ;
	diff_sensor_center = sensor_center - last_center ;
	Wait(10);
}

task main(){
  SetSensorLight(LEFT);
  SetSensorLight(RIGHT);
  SetSensorLight(CENTER);
//   follow_line_f();


// float temp = 0.0;
// for(int j = 0;j<10;j++){
//   kP += temp;
//   temp += 0.1;
//   for(int i = 0;i<5;i++){
//   follow_line_f();
//   follow_line_f();
//   back();
//   follow_line_f();
//   turn_left();
//   follow_line_f();
//   follow_line_f();
//   back();
//   follow_line_f();
// // // Wait(1000);
//   turn_right();
//   }
// // //   PlayTone(1000,500);
// // }
execute();

// turn_right();
//   }*/
PlayTone(2500,500);
// update_sensor_values();
// execute();
}

void execute(){
  bool running = true;
  char current = path[0];
  char previous = current;
  int index = 0;
  while(running){
// 	TextOut(40,24, NumToStr(current)+ " " +NumToStr(index));
// 	Wait(2000);
	switch(current){
	  case 'l':
		switch(previous){
		  case 'l':
			follow_line_f();
			break;
		  case 'u':
			turn_left();
			follow_line_f();
			break;
		  case 'd':
			turn_right();
			follow_line_f();
			break;
		  case 'r':
			turn_left();
			turn_left();
			follow_line_f();
			break;
		  case 'L':
			TextOut(40,24,  "ERROR");
			running = false;
			break;
		  case 'U':
			back();
			turn_right();
			follow_line_f(can_speed);
			break;
		  case 'D':
			back();
			turn_left();
			follow_line_f(can_speed);
			break;
		  case 'R':
			back();
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'u':
		switch(previous){
		  case 'l':
			turn_right();
			follow_line_f();
			break;
		  case 'u':
			follow_line_f();
			break;
		  case 'd':
			turn_right();
			turn_right();
			follow_line_f();
			break;
		  case 'r':
			turn_left();
			follow_line_f();
			break;
		  case 'L':
			back();
			turn_left();
			follow_line_f(can_speed);
			break;
		  case 'U':
			TextOut(40,24,  "ERROR");
			running = false;
			break;
		  case 'D':
			back();
			follow_line_f(can_speed);
			break;
		  case 'R':
			back();
			turn_right();
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'd':
	    switch(previous){
		  case 'l':
			turn_left();
			follow_line_f();
			break;
		  case 'u':
			turn_left();
			turn_left();
			follow_line_f();
			break;
		  case 'd':
			follow_line_f();
			break;
		  case 'r':
			turn_right();
			follow_line_f();
			break;
		  case 'L':
			back();
			turn_right();
			follow_line_f(can_speed);
			break;
		  case 'U':
			back();
			follow_line_f(can_speed);
			break;
		  case 'D':
			TextOut(40,24,  "ERROR");
			running = false;
			break;
		  case 'R':
			back();
			turn_left();
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'r':
		switch(previous){
		  case 'l':
			turn_right();
			turn_right();
			follow_line_f();
			break;
		  case 'u':
			turn_right();
			follow_line_f();
			break;
		  case 'd':
			turn_left();
			follow_line_f();
			break;
		  case 'r':
			follow_line_f();
			break;
		  case 'L':
			back();
			follow_line_f(can_speed);
			break;
		  case 'U':
			back();
			turn_left();
			follow_line_f(can_speed);
			break;
		  case 'D':
			back();
			turn_right();
			follow_line_f(can_speed);
			break;
		  case 'R':
			TextOut(40,24,  "ERROR");
			running = false;
			break;
		  default:
			break;
		}
		break;
	  case 'L':
		switch(previous){
		  case 'l':
		    follow_line_f();
		    follow_line_f();
			break;
		  case 'u':
			turn_left();
			follow_line_f();
			follow_line_f();
			break;
		  case 'd':
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'r':
			turn_left();
			turn_left();
			follow_line_f();
			follow_line_f();
			break;
		  case 'L':
			follow_line_f(can_speed);
			break;
		  case 'U':
			back();
			turn_right();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'D':
			back();
			turn_left();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'R':
			back();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'U':
		switch(previous){
		  case 'l':
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'u':
			follow_line_f();
			follow_line_f();
			break;
		  case 'd':
			turn_right();
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'r':
			turn_left();
			follow_line_f();
			follow_line_f();
			break;
		  case 'L':
			back();
			turn_left();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'U':
			follow_line_f(can_speed);
			break;
		  case 'D':
			back();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'R':
			back();
			turn_right();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'D':
		switch(previous){
		  case 'l':
			turn_left();
			follow_line_f();
			follow_line_f();
			break;
		  case 'u':
			turn_right();
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'd':
			follow_line_f();
			follow_line_f();
			break;
		  case 'r':
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'L':
			back();
			turn_right();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'U':
			back();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'D':
			follow_line_f(can_speed);
			break;
		  case 'R':
			back();
			turn_left();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  case 'R':
		switch(previous){
		  case 'l':
			turn_right();
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'u':
			turn_right();
			follow_line_f();
			follow_line_f();
			break;
		  case 'd':
			turn_left();
			follow_line_f();
			follow_line_f();
			break;
		  case 'r':
			follow_line_f();
			follow_line_f();
			break;
		  case 'L':
			back();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'U':
			back();
			turn_left();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'D':
			back();
			turn_right();
			follow_line_f(can_speed);
			follow_line_f(can_speed);
			break;
		  case 'R':
			follow_line_f(can_speed);
			break;
		  default:
			break;
		}
		break;
	  default:
		TextOut(40,24,  "FINISH");
		running = false;
		break;
	}
  
    index++;
	previous = current;
// 	current = moves[index];
	current = path[index];
  }
  
  
}

void follow_line_f(char basespeed = speed){
  char left_error;
  char left_speed;
  char right_speed;
  char left_previous_error = 0;
  float P, I = 0;
  int   D;

  OnFwd(MOT_L, basespeed);
  OnFwd(MOT_R, basespeed);
  Wait(200);
  int correction = 0;
  bool line_has_ended = false;
  
  update_sensor_values(); // call once to reset the difference
  while(!line_has_ended){
	TextOut(1,8,  "left");
	TextOut(75,8,  "right");
	update_sensor_values();
	TextOut(1,1,  NumToStr(sensor_left));
	TextOut(85,1, NumToStr(sensor_right));
	TextOut(40,24,NumToStr(sensor_center));

// 	if( (sensor_left  < THRESHOLD) &&
// 	  (sensor_right < THRESHOLD)
// 	){
// 	if(sensor_center < THRESHOLD_CENTER){
	if(diff_sensor_center < -THRESHOLD_DIFF_SENSOR_L){ //going from white (high) to dark (low)
	  Off(MOTOR);
// 	  TextOut(40,24,  "KRYDS");
	  line_has_ended = true;
// 	  PlayTone(1000,200);
	} else {
	  TextOut(40,24,  "     ");
	  TextOut(1,16, NumToStr(left_speed));
	  TextOut(80,16, NumToStr(right_speed));
	  left_error = sensor_left - sensor_right;
	  TextOut(30,1,"        ");
	  TextOut(40,24,NumToStr(sensor_center));
	  // lighting mismatch correction
	  /*if(left_error > EXPECTED_SENSOR_ERROR){
		left_error -= EXPECTED_SENSOR_ERROR;
	  } else if(left_error < -EXPECTED_SENSOR_ERROR){
		left_error += EXPECTED_SENSOR_ERROR;
	  } else {
		left_error = 0;
	  }*/
	  P = left_error;
	  I = I + left_error;
	  D = left_error - left_previous_error;
	  left_previous_error = left_error;
	  correction = P * kP + I * kI + D * kD;

	  if(correction > 20)
		correction = 20;
	  else if(correction < -20)
		correction = -20;

	  left_speed =  basespeed + correction;
	  right_speed = basespeed - correction;
	  /*
	  char min_speed = 60;
	  if(left_speed > 100)
		left_speed = 100;
	  else if(left_speed < min_speed)
		left_speed = min_speed;
	  
	  if(right_speed > 100)
		right_speed = 100;
	  else if(right_speed < min_speed)
		right_speed = min_speed;
	  */
	  OnFwd(MOT_L, left_speed);
	  OnFwd(MOT_R, right_speed);
	}
// 	Wait(1); // Generate 100 hz controller
  }
}

void back(){
  //   OnFwd(MOT_L, -60);
  //   OnFwd(MOT_R, -60);
  
  RotateMotorEx(OUT_AB,-60,135,0,true,false);
  turn_left(false);
  Wait(100);
  follow_line_f(80);
}

void turn_left(bool forward = true){
//   Off(MOTOR);
//   Wait(1000);
  if(forward){ //move until the robot axis is over the intersection
	RotateMotorEx(OUT_AB,80,forward_left,0,true,false); //use motor ticks instead of time
// 	OnFwd(MOT_L, 80);
// 	OnFwd(MOT_R, 80);
// 	Wait(300);
  }
  OnFwd(MOT_L, -turn_speed_left);
  OnFwd(MOT_R, turn_speed_left);
  Wait(400);
  bool turn_completed = false;
  while(!turn_completed){
	update_sensor_values();

	if(diff_sensor_left < -THRESHOLD_DIFF_SENSOR_L) //white to black
	  turn_completed = true;

  }
//   PlayTone(1500,500); 	
  Off(MOTOR);
  Wait(300);

  OnFwd(MOT_L, -40);
  OnFwd(MOT_R, 40);
  
//   Wait(30);
  
//   if(Sensor(RIGHT) > THRESHOLD) // If the turn stops before the line, add wait
  
  while(diff_sensor_left > THRESHOLD_DIFF_SENSOR_L){ update_sensor_values(); }; //until it goes from black to white

//    Off(MOTOR);
//    Wait(1000);
}  

void turn_right(bool forward = true){
//   Off(MOTOR);
//   Wait(1000);
  if(forward){ //move until the robot axis is over the intersection
// 	RotateMotorEx(OUT_AB,80,120,0,true,false); //use motor ticks instead of time
	RotateMotorEx(OUT_AB,80,forward_right,0,true,false);

  }
  OnFwd(MOT_L, turn_speed_right);
  OnFwd(MOT_R, -turn_speed_right);
  Wait(400);
  bool turn_completed = false;
  while(!turn_completed){
	update_sensor_values();
// 	if(sensor_right < THRESHOLD)
	if(diff_sensor_right < -THRESHOLD_DIFF_SENSOR_R) //if going from white to black
	  turn_completed = true;
  }
   Off(MOTOR);
   Wait(300);

  OnFwd(MOT_L, 40);
  OnFwd(MOT_R, -40);
//   Wait(50);
  
  while(diff_sensor_right > THRESHOLD_DIFF_SENSOR_R){ update_sensor_values(); }; //until it goes from black to white
 
//   Off(MOTOR);
//   Wait(1000);
}
